openapi: 3.0.0
x-stoplight:
  id: c42a432888b87
info:
  title: Simptel Authorization Server
  description: REST API of the Simptel Authorization Server
  version: 1.0.0
servers:
  - url: 'http://{{baseurl}}'
components:
  securitySchemes:
    oauth2Auth:
      type: http
      scheme: oauth2
security:
  - oauth2Auth: []
tags:
  - name: accountrecovery
  - name: accountrecovery > callback
  - name: auth
  - name: auth > login
  - name: auth > logout
  - name: auth > openid
  - name: oauth2
  - name: oauth2 > authorize
  - name: oauth2 > token
  - name: oauth2 > token > introspect
  - name: oauth2 > token > revoke
  - name: oauth2 > .well-known
  - name: oauth2 > .well-known > openid-configuration
  - name: oauth2 > jwks
  - name: registration
  - name: registration > callback
  - name: sessions
  - name: sessions > session
  - name: sessions > session > refresh
  - name: sessions > session > extend
  - name: 'sessions > session > {id}'
  - name: sessions > bucket
paths:
  /accountrecovery/callback:
    post:
      tags:
        - accountrecovery > callback
      summary: 'Verifies the TOTP (Time-based One-Time Password) during account recovery, allowing the user to obtain an access token.'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                email: izahir@simptel.com
                otp: '000000'
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: applicationId
          in: query
          schema:
            type: integer
          description: The ID of the IAM (Identity and Access Management) application.
          example: '000000000000000000000000'
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  applicationId: <string>
                  email: <email>
                  mode: accountRecovery
                message: <string>
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '401':
          description: Unauthorized
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '500':
          description: Internal Server Error
          content:
            text/plain:
              schema:
                type: string
              example: ''
      x-stoplight:
        id: x99ez9ttaytl3
  /auth/login:
    post:
      tags:
        - auth > login
      summary: Authenticate a user
      description: |
        Verifies the provided username or email and password, returning an access token upon successful authentication.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                username: <string>
                password: <string>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: applicationId
          in: query
          schema:
            type: integer
          description: Identifier of the IAM (Identity and Access Management) application.
          example: '000000000000000000000000'
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                email: <string>
                applicationId: <string>
                mode: authentication
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '404':
          description: Not Found
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '500':
          description: Internal Server Error
          content:
            text/plain:
              schema:
                type: string
              example: ''
      x-stoplight:
        id: y8sovcz9awo3p
  /auth/logout:
    get:
      tags:
        - auth > logout
      summary: Initiates the logout process for an authenticated user.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: post_logout_redirect_uri
          in: query
          schema:
            type: string
          description: Logout parameters.
          example: <string>
        - name: state
          in: query
          schema:
            type: string
          description: Logout parameters.
          example: <string>
        - name: client_id
          in: query
          schema:
            type: string
          description: Logout parameters.
          example: <string>
        - name: id_token_hint
          in: query
          schema:
            type: string
          description: Logout parameters.
          example: <string>
        - name: logout_hint
          in: query
          schema:
            type: string
          description: Logout parameters.
          example: <string>
        - name: ui_locales
          in: query
          schema:
            type: string
          description: Logout parameters.
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                message: <string>
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                error: <string>
      x-stoplight:
        id: 2ta2p3nrw81cm
  /auth/openid:
    get:
      tags:
        - auth > openid
      summary: Initiates the OpenID Connect authentication flow
      description: |
        Initiates the OpenID Connect authorization flow for a user to authenticate and obtain an access token. The callback URL /auth/oidc/login will be invoked on success.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: client_id
          in: query
          schema:
            type: string
          description: The client ID of the external provider
          example: 88e8a406-cc8b-491a-adb0-57783878b16b
        - name: redirect_uri
          in: query
          schema:
            type: string
          description: The redirect URI
          example: 'https://localhost:3001/auth/oidc/login/callback'
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                message: <string>
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '404':
          description: Not Found
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '500':
          description: Internal Server Error
          content:
            text/plain:
              schema:
                type: string
              example: ''
      x-stoplight:
        id: 4ypjxcfoq2pen
  /oauth2/authorize:
    get:
      tags:
        - oauth2 > authorize
      summary: Initiates the OAuth 2.1 authorization flow
      description: 'This endpoint initiates the OAuth 2.1 authorization flow. It supports various grant types including authorization code and refresh token. The authorization interface is the screen users see when granting applications access to their account. When implementing an OAuth server, you are enabling a developer community to build applications that leverage your platform, allowing applications to access and potentially modify private user content, or act on behalf of users. Because of this, you need to ensure you are empowering your users with as much information as possible to protect their accounts and ensure they are informed as to what applications are doing with their accounts. For more details and libraries supporting OAuth 2.1 and OpenID Connect, visit https://oauth.net/code/'
      parameters:
        - name: response_type
          in: query
          schema:
            type: string
          description: '(Required) Specifies the type of response required, must be set to ''code'' as per OAuth 2.1 protocol.'
          example: code
        - name: client_id
          in: query
          schema:
            type: integer
          description: (Required) Unique identifier of the client application seeking access.
          example: '000000000000000000000000'
        - name: redirect_uri
          in: query
          schema:
            type: string
          description: (Required) The URI to redirect user after authorization is granted or denied.
          example: 'https://platform.simptellabs.com/login'
        - name: scope
          in: query
          schema:
            type: string
          description: 'Specifies the scope of access request, might include multiple space-separated values.'
          example: openid profile email
        - name: state
          in: query
          schema:
            type: string
          description: Value used by the client to maintain state between the request and callback. Prevents cross-site request forgery.
          example: <string>
        - name: code_challenge
          in: query
          schema:
            type: string
          description: (Required) Challenge derived from the code verifier for PKCE.
          example: openid profile email
        - name: code_challenge_method
          in: query
          schema:
            type: string
          description: '(Required) Method used to derive the code challenge, either ''plain'' or ''S256''.'
          example: S256
      responses:
        '302':
          description: Found
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '401':
          description: Unauthorized
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '403':
          description: Forbidden
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '500':
          description: Internal Server Error
          content:
            text/plain:
              schema:
                type: string
              example: ''
      x-stoplight:
        id: 8nlry3sihv4fs
  /oauth2/token/introspect:
    post:
      tags:
        - oauth2 > token > introspect
      summary: Token Introspection Endpoint
      description: |
        Provides a method to introspect an OAuth 2.0 token (RFC 7662), to verify its active state and retrieve associated metadata.
        Conforms to OAuth 2.1 guidelines.
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              properties:
                token:
                  type: string
                  description: (Required) Token being sent.
                  example: <string>
                tokenTypeHint:
                  type: string
                  description: Hint about the type of the token submitted for introspection.
                  example: access_token
      security:
        - oauth2Auth: []
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/x-www-form-urlencoded
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                active: <boolean>
                scope: <string>
                client_id: <string>
                username: <string>
                token_type: <string>
                exp: <integer>
                iat: <integer>
                nbf: <integer>
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '401':
          description: Unauthorized
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '500':
          description: Internal Server Error
          content:
            text/plain:
              schema:
                type: string
              example: ''
      x-stoplight:
        id: v4ysppehwknz1
  /oauth2/token/revoke:
    post:
      tags:
        - oauth2 > token > revoke
      summary: Token Revocation Endpoint
      description: |
        Provides a method to revoke an OAuth 2.0 token (RFC 7009), making the token invalid. Conforms to OAuth 2.1 guidelines.
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              properties:
                token:
                  type: string
                  description: (Required) Token being sent.
                  example: <string>
                tokenTypeHint:
                  type: string
                  description: Hint about the type of the token submitted for introspection.
                  example: access_token
      security:
        - oauth2Auth: []
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/x-www-form-urlencoded
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '401':
          description: Unauthorized
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '500':
          description: Internal Server Error
          content:
            text/plain:
              schema:
                type: string
              example: ''
      x-stoplight:
        id: 87umipfprnxuz
  /oauth2/token:
    post:
      tags:
        - oauth2 > token
      summary: Exchange grant for Access Token
      description: |
        This operation exchanges an authorization grant (e.g., authorization code, refresh token, client credentials)
        for an access token and, optionally, a refresh token. This endpoint adheres to the OAuth 2.1 specification,
        and supports multiple methods for client authentication including "client_secret_post" and "client_secret_basic".
        Depending on the method used, the client provides authentication details either in the request body
        (for "client_secret_post") or in the "Authorization" header (for "client_secret_basic"). For more extensive information,
        visit: https://oauth.net/code/
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              properties:
                grantType:
                  type: string
                  example: authorization_code
                code:
                  type: string
                  example: <string>
                redirectUri:
                  type: string
                  example: <uri>
                clientId:
                  type: string
                  example: <string>
                codeVerifier:
                  type: string
                  example: <string>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/x-www-form-urlencoded
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                accessToken: <string>
                tokenType: <string>
                expiresIn: <long>
                refreshToken: <string>
                exampleParameter: <string>
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '401':
          description: Unauthorized
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '404':
          description: Not Found
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '500':
          description: Internal Server Error
          content:
            text/plain:
              schema:
                type: string
              example: ''
      x-stoplight:
        id: qam2pihincmug
  /oauth2/.well-known/openid-configuration:
    get:
      tags:
        - oauth2 > .well-known > openid-configuration
      summary: The OAuth 2.0 Token Endpoint
      description: 'Use open source libraries to perform OAuth 2.0 and OpenID Connect available for any programming language. You can find a list of libraries at https://oauth.net/code/'
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '401':
          description: Unauthorized
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '404':
          description: Not Found
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '500':
          description: Internal Server Error
          content:
            text/plain:
              schema:
                type: string
              example: ''
      x-stoplight:
        id: 62x5f5fsfj5s9
  /oauth2/jwks:
    get:
      tags:
        - oauth2 > jwks
      summary: Get JWKS
      description: 'This endpoint returns the JSON Web Key Set (JWKS), which can be used to verify the JWTs issued by the authorization server.'
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                keys:
                  - kty: <string>
                    use: <string>
                    kid: <string>
                    alg: <string>
                    'n': <string>
                    e: <string>
                  - kty: <string>
                    use: <string>
                    kid: <string>
                    alg: <string>
                    'n': <string>
                    e: <string>
      x-stoplight:
        id: ydyus3piyjti4
  /registration/callback:
    post:
      tags:
        - registration > callback
      summary: Verifies the OTP for registration and returns an access token.
      description: |
        This endpoint is used for the verification of the One-Time Password (OTP) during user registration. Upon successful verification, the user is provided with an access token.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                email: <email>
                otp: <string>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: applicationId
          in: query
          schema:
            type: integer
          description: (Required) The unique identifier of the IAM application initiating the registration process.
          example: '000000000000000000000000'
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  applicationId: <string>
                  email: <email>
                  mode: registration
                message: <string>
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '401':
          description: Unauthorized
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '500':
          description: Internal Server Error
          content:
            text/plain:
              schema:
                type: string
              example: ''
      x-stoplight:
        id: d8ig2e5gwwc1e
  /sessions/session/refresh:
    get:
      tags:
        - sessions > session > refresh
      summary: Refresh current session
      security:
        - oauth2Auth: []
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  cookie:
                    originalMaxAge: <integer>
                    expires: <string>
                    secure: false
                    httpOnly: true
                    domain: null
                    path: /
                    sameSite: null
                  phonenumber: <string>
                  user:
                    authentication:
                      issuer: <array>
                    _id: <string>
                    email: <string>
                    __v: 0
                    accessId: <array>
                    active: true
                    createdAt: <string>
                    emailVerified: true
                    mfaMethods:
                      - name: <string>
                        value: <string>
                      - name: <string>
                        value: <string>
                    mfaSteps: 0
                    phoneVerified: false
                    updatedAt: <string>
                    username: <string>
                    firstname: <string>
                    lastname: <string>
                    phonenumber: <string>
                  useragent:
                    ua: <string>
                    browser:
                      name: <string>
                      version: <string>
                      major: <string>
                    engine:
                      name: <string>
                      version: <string>
                    device: {}
                    cpu:
                      architecture: <string>
                  ip: <string>
                  permission:
                    create: <array>
                    read: <array>
                    update: <array>
                    delete: <array>
                  MFAInputsBucket: {}
                  sessionID: <string>
                  email: <string>
                  passport:
                    user:
                      authentication:
                        issuer: <array>
                    _id: <string>
                    email: <string>
                    __v: <number>
                    accessId: <array>
                    active: true
                    createdAt: <string>
                    emailVerified: true
                    mfaMethods:
                      - name: <string>
                        value: <string>
                      - name: <string>
                        value: <string>
                    mfaSteps: <number>
                    phoneVerified: false
                    updatedAt: <string>
                    username: <string>
                    firstname: <string>
                    lastname: <string>
                    phonenumber: <string>
        '500':
          description: Internal Server Error
          content:
            text/plain:
              schema:
                type: string
              example: ''
      x-stoplight:
        id: kut7g8czqta5z
  /sessions/session/extend:
    get:
      tags:
        - sessions > session > extend
      summary: Extend session
      security:
        - oauth2Auth: []
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '401':
          description: Unauthorized
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '500':
          description: Internal Server Error
          content:
            text/plain:
              schema:
                type: string
              example: ''
      x-stoplight:
        id: nw33dsyoueukh
  '/sessions/session/{id}':
    delete:
      tags:
        - 'sessions > session > {id}'
      summary: Close session by id
      security:
        - oauth2Auth: []
      parameters:
        - name: id
          in: path
          schema:
            type: string
          required: true
          example: <string>
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '401':
          description: Unauthorized
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '500':
          description: Internal Server Error
          content:
            text/plain:
              schema:
                type: string
              example: ''
      x-stoplight:
        id: po1mx0euv4t8p
    get:
      tags:
        - 'sessions > session > {id}'
      summary: Get session by id
      security:
        - oauth2Auth: []
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: id
          in: path
          schema:
            type: string
          required: true
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  cookie:
                    originalMaxAge: <integer>
                    expires: <string>
                    secure: false
                    httpOnly: true
                    domain: null
                    path: /
                    sameSite: null
                  phonenumber: <string>
                  user:
                    authentication:
                      issuer: <array>
                    _id: <string>
                    email: <string>
                    __v: 0
                    accessId: <array>
                    active: true
                    createdAt: <string>
                    emailVerified: true
                    mfaMethods:
                      - name: <string>
                        value: <string>
                      - name: <string>
                        value: <string>
                    mfaSteps: 0
                    phoneVerified: false
                    updatedAt: <string>
                    username: <string>
                    firstname: <string>
                    lastname: <string>
                    phonenumber: <string>
                  useragent:
                    ua: <string>
                    browser:
                      name: <string>
                      version: <string>
                      major: <string>
                    engine:
                      name: <string>
                      version: <string>
                    device: {}
                    cpu:
                      architecture: <string>
                  ip: <string>
                  permission:
                    create: <array>
                    read: <array>
                    update: <array>
                    delete: <array>
                  MFAInputsBucket: {}
                  sessionID: <string>
                  authorize:
                    WdDyzvZI:
                      protocol: <string>
                      client: <string>
                      redirectURI: <string>
                      webOrigin: null
                      req:
                        type: <string>
                        clientID: <string>
                        redirectURI: <string>
                        scope: <array>
                        state: <string>
                      info: null
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '401':
          description: Unauthorized
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '500':
          description: Internal Server Error
          content:
            text/plain:
              schema:
                type: string
              example: ''
      x-stoplight:
        id: 0fhkrmn7huzi1
  /sessions/session:
    get:
      tags:
        - sessions > session
      summary: Get current session
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  cookie:
                    originalMaxAge: <integer>
                    expires: <string>
                    secure: false
                    httpOnly: true
                    domain: null
                    path: /
                    sameSite: null
                  phonenumber: <string>
                  user:
                    authentication:
                      issuer: <array>
                    _id: <string>
                    email: <string>
                    __v: 0
                    accessId: <array>
                    active: true
                    createdAt: <string>
                    emailVerified: true
                    mfaMethods:
                      - name: <string>
                        value: <string>
                      - name: <string>
                        value: <string>
                    mfaSteps: 0
                    phoneVerified: false
                    updatedAt: <string>
                    username: <string>
                    firstname: <string>
                    lastname: <string>
                    phonenumber: <string>
                  useragent:
                    ua: <string>
                    browser:
                      name: <string>
                      version: <string>
                      major: <string>
                    engine:
                      name: <string>
                      version: <string>
                    device: {}
                    cpu:
                      architecture: <string>
                  ip: <string>
                  permission:
                    create: <array>
                    read: <array>
                    update: <array>
                    delete: <array>
                  MFAInputsBucket: {}
                  sessionID: <string>
                  email: <string>
                  passport:
                    user:
                      authentication:
                        issuer: <array>
                    _id: <string>
                    email: <string>
                    __v: <number>
                    accessId: <array>
                    active: true
                    createdAt: <string>
                    emailVerified: true
                    mfaMethods:
                      - name: <string>
                        value: <string>
                      - name: <string>
                        value: <string>
                    mfaSteps: <number>
                    phoneVerified: false
                    updatedAt: <string>
                    username: <string>
                    firstname: <string>
                    lastname: <string>
                    phonenumber: <string>
        '401':
          description: Unauthorized
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '500':
          description: Internal Server Error
          content:
            text/plain:
              schema:
                type: string
              example: ''
      x-stoplight:
        id: jc3j8zzuih9en
    delete:
      tags:
        - sessions > session
      summary: Close current session
      security:
        - oauth2Auth: []
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '401':
          description: Unauthorized
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '500':
          description: Internal Server Error
          content:
            text/plain:
              schema:
                type: string
              example: ''
      x-stoplight:
        id: oklf7kd9azavi
  /sessions/bucket:
    put:
      tags:
        - sessions > bucket
      summary: update session bucket
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                session: {}
      security:
        - oauth2Auth: []
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  cookie:
                    originalMaxAge: <integer>
                    expires: <string>
                    secure: false
                    httpOnly: true
                    domain: null
                    path: /
                    sameSite: null
                  phonenumber: <string>
                  user:
                    authentication:
                      issuer: <array>
                    _id: <string>
                    email: <string>
                    __v: 0
                    accessId: <array>
                    active: true
                    createdAt: <string>
                    emailVerified: true
                    mfaMethods:
                      - name: <string>
                        value: <string>
                      - name: <string>
                        value: <string>
                    mfaSteps: 0
                    phoneVerified: false
                    updatedAt: <string>
                    username: <string>
                    firstname: <string>
                    lastname: <string>
                    phonenumber: <string>
                  useragent:
                    ua: <string>
                    browser:
                      name: <string>
                      version: <string>
                      major: <string>
                    engine:
                      name: <string>
                      version: <string>
                    device: {}
                    cpu:
                      architecture: <string>
                  ip: <string>
                  permission:
                    create: <array>
                    read: <array>
                    update: <array>
                    delete: <array>
                  MFAInputsBucket: {}
                  sessionID: <string>
                  authorize:
                    WdDyzvZI:
                      protocol: <string>
                      client: <string>
                      redirectURI: <string>
                      webOrigin: null
                      req:
                        type: <string>
                        clientID: <string>
                        redirectURI: <string>
                        scope: <array>
                        state: <string>
                      info: null
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '401':
          description: Unauthorized
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '500':
          description: Internal Server Error
          content:
            text/plain:
              schema:
                type: string
              example: ''
      x-stoplight:
        id: q59tm5l7yo0wa
  /sessions:
    get:
      tags:
        - sessions
      summary: Get logged in users sessions
      security:
        - oauth2Auth: []
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                _id: <string>
                expires: <string>
                data:
                  cookie:
                    originalMaxAge: <integer>
                    expires: <string>
                    secure: false
                    httpOnly: true
                    domain: null
                    path: /
                    sameSite: null
                  phonenumber: <string>
                  user:
                    authentication:
                      issuer: <array>
                    _id: <string>
                    email: <string>
                    __v: 0
                    accessId: <array>
                    active: true
                    createdAt: <string>
                    emailVerified: true
                    mfaMethods:
                      - name: <string>
                        value: <string>
                      - name: <string>
                        value: <string>
                    mfaSteps: 0
                    phoneVerified: false
                    updatedAt: <string>
                    username: <string>
                    firstname: <string>
                    lastname: <string>
                    phonenumber: <string>
                  useragent:
                    ua: <string>
                    browser:
                      name: <string>
                      version: <string>
                      major: <string>
                    engine:
                      name: <string>
                      version: <string>
                    device: {}
                    cpu:
                      architecture: <string>
                  ip: <string>
                  permission:
                    create: <array>
                    read: <array>
                    update: <array>
                    delete: <array>
                  MFAInputsBucket: {}
                  sessionID: <string>
                  email: <string>
                  passport:
                    user:
                      authentication:
                        issuer: <array>
                    _id: <string>
                    email: <string>
                    __v: <number>
                    accessId: <array>
                    active: true
                    createdAt: <string>
                    emailVerified: true
                    mfaMethods:
                      - name: <string>
                        value: <string>
                      - name: <string>
                        value: <string>
                    mfaSteps: <number>
                    phoneVerified: false
                    updatedAt: <string>
                    username: <string>
                    firstname: <string>
                    lastname: <string>
                    phonenumber: <string>
        '401':
          description: Unauthorized
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '500':
          description: Internal Server Error
          content:
            text/plain:
              schema:
                type: string
              example: ''
      x-stoplight:
        id: vyxz32ibjowrg
